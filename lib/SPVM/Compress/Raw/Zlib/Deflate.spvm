# Copyright (c) 2025 Yuki Kimoto
# MIT License

class Compress::Raw::Zlib::Deflate {
  version_from Compress::Raw::Zlib;
  
  use Compress::Raw::Zlib::Constant as ZLIB;
  use Fn;
  use Compress::Raw::Zlib::Z_stream;
  
  # Undocumented Fields
  has Level : int;
  
  has Method : int;
  
  has WindowBits : int;
  
  has MemLevel : int;
  
  has Strategy : int;
  
  has Dictionary : string;
  
  has Bufsize : long;
  
  has AppendOutput : byte;
  
  has CRC32 : byte;
  
  has ADLER32 : byte;
  
  has z_stream : Compress::Raw::Zlib::Z_stream;
  
  has adler32 : long;
  
  has crc32 : long;
  
  # Class Methods
  static method new : Compress::Raw::Zlib::Deflate ($options : object[] = undef) {
    
    my $self = new Compress::Raw::Zlib::Deflate;
    
    $self->init($options);
    
    return $self;
  }
  
  # Instance Methods
  method init : void ($options : object[] = undef) {
    
    my $option_names = [
      "-Level",
      "-Method",
      "-WindowBits",
      "-MemLevel",
      "-Strategy",
      "-Dictionary",
      "-Bufsize",
      "-AppendOutput",
      "-CRC32",
      "-ADLER32",
    ];
    
    Fn->check_option_names($options, $option_names);
    
    my $options_h = Hash->new($options);
    
    if ($options_h->exists("-Level")) {
      $self->{Level} = $options_h->get_or_default_int("-Level", ZLIB->Z_DEFAULT_COMPRESSION);
    }
    
    if ($options_h->exists("-Method")) {
      $self->{Method} = $options_h->get_or_default_int("-Method", ZLIB->Z_DEFLATED);
    }
    
    if ($options_h->exists("-WindowBits")) {
      $self->{WindowBits} = $options_h->get_or_default_int("-WindowBits", ZLIB->MAX_WBITS);
    }
    
    if ($options_h->exists("-MemLevel")) {
      $self->{MemLevel} = $options_h->get_or_default_int("-MemLevel", ZLIB->MAX_MEM_LEVEL);
    }
    
    if ($options_h->exists("-Strategy")) {
      $self->{Strategy} = $options_h->get_or_default_int("-Strategy", ZLIB->Z_DEFAULT_STRATEGY);
    }
    
    if ($options_h->exists("-Dictionary")) {
      $self->{Dictionary} = $options_h->get_or_default_string("-Dictionary", "");
    }
    
    if ($options_h->exists("-Bufsize")) {
      $self->{Bufsize} = $options_h->get_or_default_long("-Bufsize", 4096);
    }
    
    if ($options_h->exists("-AppendOutput")) {
      $self->{AppendOutput} = (byte)$options_h->get_or_default_int("-AppendOutput", 0);
    }
    
    if ($options_h->exists("-CRC32")) {
      $self->{CRC32} = (byte)$options_h->get_or_default_int("-CRC32", 0);
    }
    
    if ($options_h->exists("-ADLER32")) {
      $self->{ADLER32} = (byte)$options_h->get_or_default_int("-ADLER32", 0);
    }
    
    unless ($self->{Bufsize} >= 1) {
      die "The value of '-Bufsize' option must be >= 1.";
    }
    
    # MAX_WBITS is 0b1111. WANT_GZIP is 16.
    if (($self->{WindowBits} & ZLIB->MAX_WBITS) == 0) {
      $self->{WindowBits} += ZLIB->MAX_WBITS;
    }
    
    $self->_deflateInit;
    
  }
  
  native method deflateReset : void ();
  
  native method deflateTune : void ($good_length : int, $max_lazy : int, $nice_length : int, $max_chain : int);
  
  native method total_out : long ();
  
  native method total_in : long ();
  
  method get_Bufsize : long () {
    return $self->{Bufsize};
  }
  
  method get_Strategy : int () {
    return $self->{Strategy};
  }
  
  method adler32 : long () {
    return $self->{adler32};
  }
  
  method crc32 : long () {
    return $self->{crc32};
  }
  
  native method deflate : void ($input : string, $output_ref : string[]);
  
  native method flush : void ($output_ref : string[], $flush_type : int = -1);
  
  native method dict_adler : long ();
  
  native method DESTROY : void ();
  
  method deflateParams : void ($options : object[] = undef) {
    
    my $option_names = [
      "-Level",
      "-Strategy",
    ];
    
    Fn->check_option_names($options, $option_names);
    
    my $options_h = Hash->new($options);
    
    if ($options_h->exists("-Level")) {
      $self->{Level} = $options_h->get_int("-Level");
    }
    if ($options_h->exists("-Strategy")) {
      $self->{Strategy} = $options_h->get_int("-Strategy");
    }
    
  }
  
  private native method _deflateInit : void ();
}
