# Copyright (c) 2025 Yuki Kimoto
# MIT License

class Compress::Raw::Zlib::Deflate {
  version_from Compress::Raw::Zlib;
  
  use Compress::Raw::Zlib::Constant as ZLIB;
  use Fn;
  
  # Fields
  has Level : int;
  
  has Method : int;
  
  has WindowBits : int;
  
  has MemLevel : int;
  
  has Strategy : int;
  
  has Dictionary : object;
  
  has Bufsize : int;
  
  has AppendOutput : byte;
  
  has CRC32 : byte;
  
  has ADLER32 : byte;
  
  # Class Methods
  static method new : Compress::Raw::Zlib::Deflate ($options : object[] = undef) {
    
    my $self = new Compress::Raw::Zlib::Deflate;
    
    $self->init($options);
    
    return $self;
  }
  
  # Instance Methods
  method init : void ($options : object[] = undef) {
    
    my $option_names = [
      "-Level",
      "-Method",
      "-WindowBits",
      "-MemLevel",
      "-Strategy",
      "-Dictionary",
      "-Bufsize",
      "-AppendOutput",
      "-CRC32",
      "-ADLER32",
    ];
    
    Fn->check_option_names($options, $option_names);
    
    my $options_h = Hash->new($options);
    
    if ($options_h->exists("-Level")) {
      $self->{Level} = $options_h->get_or_default_int("-Level", ZLIB->Z_DEFAULT_COMPRESSION);
    }
    
    if ($options_h->exists("-Method")) {
      $self->{Method} = $options_h->get_or_default_int("-Method", ZLIB->Z_DEFLATED);
    }
    
    if ($options_h->exists("-WindowBits")) {
      $self->{WindowBits} = $options_h->get_or_default_int("-WindowBits", ZLIB->MAX_WBITS);
    }
    
    if ($options_h->exists("-MemLevel")) {
      $self->{MemLevel} = $options_h->get_or_default_int("-MemLevel", ZLIB->MAX_MEM_LEVEL);
    }
    
    if ($options_h->exists("-Strategy")) {
      $self->{Strategy} = $options_h->get_or_default_int("-Strategy", ZLIB->Z_DEFAULT_STRATEGY);
    }
    
    if ($options_h->exists("-Dictionary")) {
      $self->{Dictionary} = $options_h->get_or_default("-Dictionary", "");
    }
    
    if ($options_h->exists("-Bufsize")) {
      $self->{Bufsize} = $options_h->get_or_default_int("-Bufsize", 4096);
    }
    
    if ($options_h->exists("-AppendOutput")) {
      $self->{AppendOutput} = (byte)$options_h->get_or_default_int("-AppendOutput", 0);
    }
    
    if ($options_h->exists("-CRC32")) {
      $self->{CRC32} = (byte)$options_h->get_or_default_int("-CRC32", 0);
    }
    
    if ($options_h->exists("-ADLER32")) {
      $self->{ADLER32} = (byte)$options_h->get_or_default_int("-ADLER32", 0);
    }
    
    unless ($self->{Bufsize} >= 1) {
      die "The value of '-Bufsize' option must be >= 1.";
    }
    
    my $windowBits =  $self->{WindowBits};
    
    if (($self->{WindowBits} & ZLIB->MAX_WBITS) == 0) {
      $self->{WindowBits} += ZLIB->MAX_WBITS;
    }
  }
}

__END__

void
_deflateInit(flags,level, method, windowBits, memLevel, strategy, bufsize, dictionary)
    int flags
    int	level
    int method
    int windowBits
    int memLevel
    int strategy
    uLong bufsize
    SV* dictionary
  PPCODE:
    int err ;
    deflateStream s ;

    if (trace)
        warn("in _deflateInit(level=%d, method=%d, windowBits=%d, memLevel=%d, strategy=%d, bufsize=%ld dictionary=%p)\n",
	level, method, windowBits, memLevel, strategy, bufsize, dictionary) ;
    if ((s = InitStream() )) {

        s->Level      = level;
        s->Method     = method;
        s->WindowBits = windowBits;
        s->MemLevel   = memLevel;
        s->Strategy   = strategy;

        err = CRZ_deflateInit2(&(s->stream), level,
			   method, windowBits, memLevel, strategy);

        if (trace) {
            warn(" _deflateInit2 returned %d (state %p)\n", err, s);
            DispStream(s, "INIT");
        }

	/* Check if a dictionary has been specified */
	SvGETMAGIC(dictionary);
	if (err == Z_OK && SvPOK(dictionary) && SvCUR(dictionary)) {
#ifdef UTF8_AVAILABLE
            if (DO_UTF8(dictionary) && !sv_utf8_downgrade(dictionary, 1))
                croak("Wide character in Compress::Raw::Zlib::Deflate::new dicrionary parameter");
#endif
	    err = CRZ_deflateSetDictionary(&(s->stream), (const Bytef*) SvPVX(dictionary), SvCUR(dictionary)) ;
        if (trace)
            warn("deflateSetDictionary returned %d\n", err);
	    s->dict_adler = s->stream.adler ;
	}

        if (err != Z_OK) {
            Safefree(s) ;
            s = NULL ;
	}
	else
	    PostInitStream(s, flags, bufsize, windowBits) ;

    }
    else
        err = Z_MEM_ERROR ;

    {
        SV* obj = sv_setref_pv(sv_newmortal(),
            "Compress::Raw::Zlib::deflateStream", (void*)s);
        XPUSHs(obj);
    }
    if (GIMME_V == G_ARRAY) {
        SV * sv = sv_2mortal(newSViv(err)) ;
	setDUALstatus(sv, err);
        XPUSHs(sv) ;
    }

