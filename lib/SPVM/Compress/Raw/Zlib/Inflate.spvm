# Copyright (c) 2025 Yuki Kimoto
# MIT License

class Compress::Raw::Zlib::Inflate {
  version_from Compress::Raw::Zlib;
  
  use Compress::Raw::Zlib::Constant as ZLIB;
  use Fn;
  use Compress::Raw::Zlib::Z_stream;
  
  # Undocumented Fields
  has WindowBits : int;
  
  has Dictionary : string;
  
  has Bufsize : int;
  
  has AppendOutput : byte;
  
  has CRC32 : byte;
  
  has ADLER32 : byte;
  
  has LimitOutput : byte;
  
  has ConsumeInput : byte;
  
  has z_stream : Compress::Raw::Zlib::Z_stream;
  
  # Class Methods
  static method new : Compress::Raw::Zlib::Inflate ($options : object[] = undef) {
    
    my $self = new Compress::Raw::Zlib::Inflate;
    
    $self->init($options);
    
    return $self;
  }
  
  # Instance Methods
  method init : void ($options : object[] = undef) {
    
    my $option_names = [
      "-WindowBits",
      "-Dictionary",
      "-Bufsize",
      "-AppendOutput",
      "-CRC32",
      "-ADLER32",
      "-LimitOutput",
      "-ConsumeInput",
    ];
    
    Fn->check_option_names($options, $option_names);
    
    my $options_h = Hash->new($options);
    
    if ($options_h->exists("-WindowBits")) {
      $self->{WindowBits} = $options_h->get_or_default_int("-WindowBits", ZLIB->MAX_WBITS);
    }
    
    if ($options_h->exists("-Dictionary")) {
      $self->{Dictionary} = $options_h->get_or_default_string("-Dictionary", "");
    }
    
    if ($options_h->exists("-Bufsize")) {
      $self->{Bufsize} = $options_h->get_or_default_int("-Bufsize", 4096);
    }
    
    if ($options_h->exists("-AppendOutput")) {
      $self->{AppendOutput} = (byte)$options_h->get_or_default_int("-AppendOutput", 0);
    }
    
    if ($options_h->exists("-CRC32")) {
      $self->{CRC32} = (byte)$options_h->get_or_default_int("-CRC32", 0);
    }
    
    if ($options_h->exists("-ADLER32")) {
      $self->{ADLER32} = (byte)$options_h->get_or_default_int("-ADLER32", 0);
    }
    
    if ($options_h->exists("-LimitOutput")) {
      $self->{LimitOutput} = (byte)$options_h->get_or_default_int("-LimitOutput", 0);
    }
    
    if ($options_h->exists("-ConsumeInput")) {
      $self->{ConsumeInput} = (byte)$options_h->get_or_default_int("-ConsumeInput", 0);
    }
    
    unless ($self->{Bufsize} >= 1) {
      die "The value of '-Bufsize' option must be >= 1.";
    }
    
    if (($self->{WindowBits} & ZLIB->MAX_WBITS) == 0) {
      $self->{WindowBits} += ZLIB->MAX_WBITS;
    }
    
  }
  
}

__END__

our $OPTIONS_inflate =
    {
        'AppendOutput'  => [1, 1, Parse_boolean,  0],
        'LimitOutput'   => [1, 1, Parse_boolean,  0],
        'CRC32'         => [1, 1, Parse_boolean,  0],
        'ADLER32'       => [1, 1, Parse_boolean,  0],
        'ConsumeInput'  => [1, 1, Parse_boolean,  1],
        'Bufsize'       => [1, 1, Parse_unsigned, 4096],

        'WindowBits'    => [1, 1, Parse_signed,   MAX_WBITS()],
        'Dictionary'    => [1, 1, Parse_any,      ""],
    } ;

}
sub Compress::Raw::Zlib::Inflate::new
{
    my $pkg = shift ;
    my ($got) = ParseParameters(0, $OPTIONS_inflate, @_);

    croak "Compress::Raw::Zlib::Inflate::new: Bufsize must be >= 1, you specified " .
            $got->value('Bufsize')
        unless $got->value('Bufsize') >= 1;

    my $flags = 0 ;
    $flags |= FLAG_APPEND if $got->value('AppendOutput') ;
    $flags |= FLAG_CRC    if $got->value('CRC32') ;
    $flags |= FLAG_ADLER  if $got->value('ADLER32') ;
    $flags |= FLAG_CONSUME_INPUT if $got->value('ConsumeInput') ;
    $flags |= FLAG_LIMIT_OUTPUT if $got->value('LimitOutput') ;


    my $windowBits =  $got->value('WindowBits');
    $windowBits += MAX_WBITS()
        if ($windowBits & MAX_WBITS()) == 0 ;

    _inflateInit($flags, $windowBits, $got->value('Bufsize'),
                 $got->value('Dictionary')) ;
}

